we have use two different methods :

Method 1 : is using 'attach' method to store data and 'updateExistingPivot' to update data and detach to delete all data or 'detach($request->attribute_value_id)' to delete a specific data

    //// if you want to delete all attribute values for this product :
    // $product->attributeValues()->detach();

    // // if you want to delete specific attribute values for this product :
    // $product->attributeValues()->detach($request->attribute_value_id);



    /** this validation if you want to save multiple attribute with multiple values for one product : */
    // 'product_id' => 'required|integer|exists:products,id|gt:0',

    // 'attributes' => 'required|array|min:1',
    // 'attributes.*.attribute_id' => 'required|integer|exists:attributes,id|gt:0',

    // 'attributes.*.values' => 'required|array',
    // 'attributes.*.values.*.attribute_value_id' => 'required|exists:attribute_values,id',

    // 'attributes.*.values.*.extra_price' => 'required|numeric|min:0',
    // 'attributes.*.values.*.quantity' => 'required|integer|min:0',
    // 'attributes.*.values.*.is_default' => 'required|boolean',


## Store : 

    public function save_product_attribute_value(Request $request,string $id)
    {

        $request->validate([
            'attribute_id' => 'required|integer|exists:attributes,id|gt:0',
            'attribute_value_id' => 'required|integer|exists:attribute_values,id|gt:0|required_with:attribute_id',
            'extra_price' => 'required|numeric|min:0',//need modify to decimal value
            'quantity' => 'required|integer|min:0',
            'is_default' => 'required|boolean',
        ]);

        try{
            DB::beginTransaction();


            $product = Product::find($id);
            
            if(!$product){
                return $this->error('Product Is Not Found!',NOT_FOUND_ERROR_CODE);
            }
            
            $attributeValue = AttributeValue::where('id',$request->attribute_value_id)->first();

            if($attributeValue->attribute_id != $request->attribute_id){
                return $this->error('This Attribute is not matched with Value , Please Check Again !',NOT_FOUND_ERROR_CODE);
            }

            $product->attributeValues()->attach($request->attribute_value_id,[
                'attribute_id' => $request->attribute_id,
                'extra_price' => $request->extra_price,
                'quantity' => $request->quantity,
                'is_default' => $request->is_default,
            ]);


            DB::commit();
            return $this->success('Created Successfully !',SUCCESS_CODE);
            
        }catch (ValidationException $ex) {
            DB::rollBack();  
            return $this->error($ex->getMessage(), VALIDATION_ERROR_CODE);
        }catch(\Exception $ex){ 
            DB::rollBack();
            return $this->error($ex->getMessage(),ERROR_CODE);
        }
    }
## Update :

public function update_product_attribute_value(Request $request, string $id, int $attributeValueId)
{
    $request->validate([
        'attribute_id' => 'required|integer|exists:attributes,id|gt:0',
        'attribute_value_id' => 'required|integer|exists:attribute_values,id|gt:0|required_with:attribute_id',
        'extra_price' => 'required|numeric|min:0',
        'quantity' => 'required|integer|min:0',
        'is_default' => 'required|boolean',
    ]);

    try {
        DB::beginTransaction();

        $product = Product::find($id);

        if (!$product) {
            return $this->error('Product Is Not Found!', NOT_FOUND_ERROR_CODE);
        }

        $attributeValue = AttributeValue::find($attributeValueId);

        if (!$attributeValue) {
            return $this->error('Attribute Value Is Not Found!', NOT_FOUND_ERROR_CODE);
        }

        $product->attributeValues()->updateExistingPivot($attributeValueId, [
            'extra_price' => $request->extra_price,
            'quantity' => $request->quantity,
            'is_default' => $request->is_default,
        ]);

        DB::commit();
        return $this->success('Product Attribute Value Updated Successfully !', SUCCESS_CODE);

    } catch (ValidationException $ex) {
        DB::rollBack();
        return $this->error($ex->getMessage(), VALIDATION_ERROR_CODE);
    } catch (\Exception $ex) {
        DB::rollBack();
        return $this->error($ex->getMessage(), ERROR_CODE);
    }
}

## Delete :
// $product->attributeValues()->detach($request->attribute_value_id);

## Delete all :

// $product->attributeValues()->detach();







########################################################################################################
Method 2 : is creating ProductAttributeValue Model and store and update and delete normly data.